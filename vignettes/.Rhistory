paste(c(1, 2, 3, 4), collapse = "_")
paste(c(1, 2, 3, 4), collapse = "_") -> t
paste("./", t, ".csv", sep = "")
paste("seurat", c(1, 2, 3, 4), collapse = "_")
t <- c(1, 2)
paste(c("seurat", t), collapse = "_")
library(devtools)
setwd("C:/Users/rli8/projects/ziyi/enrichment-analysis/easycelltype")
usethis::use_vignette("my-vignette")
devtools::document()
602/50
12.04*454
5466.16/7.85
50/602
454*50/602
37.70764 / 7.85
454/(602*7.85)
### Installation
The package can be installed using `BiocManager` using the following commands:
```{r setup}
library()
```
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EasyCellType")
# Install Seurat
install.packages('Seurat')
library(Seurat)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "../data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "./data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "./data/pbmc3k/filtered_gene_bc_matrices/hg19/")
setwd("C:/Users/rli8/projects/ziyi/enrichment-analysis/easycelltype")
# Install Seurat
install.packages('Seurat')
library(Seurat)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "./data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "./data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "./data/pbmc3k/filtered_gene_bc_matrices/hg19")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "./data/pbmc3k/filtered_gene_bc_matrices/hg19/")
pwd
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/rli8/projects/ziyi/enrichment-analysis/easycelltype\data/data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/rli8/projects/ziyi/enrichment-analysis/easycelltype/data/data/pbmc3k/filtered_gene_bc_matrices/hg19/")
?Read10X
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/rli8/projects/ziyi/enrichment-analysis/easycelltype/data/pbmc3k/filtered_gene_bc_matrices/hg19/")
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Initialize the Seurat object
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Perfom linear dimensional reduction
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Identify highly variable features
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Perfom linear dimensional reduction
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Scale the data
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- ScaleData(pbmc, features = all.genes)
# Perfom linear dimensional reduction
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Cluster the cells
pbmc <- FindNeighbors(pbmc, dims = 1:10)
# Cluster the cells
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Find differentially expressed features
markers <- FindMarkers(pbmc, min.pct = 0.25, logfc.threshold = 0.25)
# Find differentially expressed features
markers <- FindAllMarkers(pbmc, min.pct = 0.25, logfc.threshold = 0.25)
View(markers)
# Find differentially expressed features
markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
View(markers)
markers$entrezid <- mapIds(org.Hs.eg.db,
keys=markers$gene, #Column containing Ensembl gene ids
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
library( "org.Hs.eg.db")
library(AnnotationDbi)
markers$entrezid <- mapIds(org.Hs.eg.db,
keys=markers$gene, #Column containing Ensembl gene ids
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
makers <- na.omit(markers)
markers <- na.omit(markers)
library(dplyr)
markers <- read.csv("../realdata/tnbc/markers_meta_modified.csv", header = TRUE)
markers$ENTREZID = mapIds(org.Hs.eg.db,
keys=markers$gene, #Column containing Ensembl gene ids
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
markers.c <- na.omit(markers)
markers.c <- markers[markers$avg_log2FC > 0, ]
input <- markers.c %>%
group_by(cluster) %>%
distinct(ENTREZID, .keep_all = TRUE) %>%
mutate(rank = rank(avg_log2FC),  ties.method = "random") %>%
arrange(desc(rank))
enrich.re <- gsea(data = input, p.cut = 0.1)
setwd("C:/Users/rli8/projects/ziyi/enrichment-analysis/R")
source("gsea_func2.R")
source("common.R")
library(reshape2)
markers <- read.csv("../realdata/tnbc/markers_meta_modified.csv", header = TRUE)
markers$ENTREZID = mapIds(org.Hs.eg.db,
keys=markers$gene, #Column containing Ensembl gene ids
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
markers.c <- na.omit(markers)
markers.c <- markers[markers$avg_log2FC > 0, ]
input <- markers.c %>%
group_by(cluster) %>%
distinct(ENTREZID, .keep_all = TRUE) %>%
mutate(rank = rank(avg_log2FC),  ties.method = "random") %>%
arrange(desc(rank))
enrich.re <- gsea(data = input, p.cut = 0.1)
fisher.re <- gsea(data = input, test = fisher)
####
cluster.cells <- read.csv("../realdata/tnbc/cluster-cells_meta_modified.csv", header = TRUE)
load("../realdata/tnbc/Processed_TNBCdata_GSE176078.RData")
meta <- data.frame(cells = TNBCmeta$X, celltype = TNBCmeta$celltype_major)
#[!unique(meta$celltype) %in% c("CAFs", "Cancer Epithelial")]
cell_name_to_new <- cbind(unique(meta$celltype),
cell_type_new = c("Endothelial", "CAFs", "cytotoxin", "B cell",
"T cell|NKT", "Myeloid", "Epithelial", "Plasma", "Cancer Epithelial"))
summary.d <- merge(cluster.cells, meta, by.x = "X", by.y = "cells")
summary.d <- merge(summary.d, cell_name_to_new, by.x = "celltype", by.y = "V1")
anno <- get_accu(enrich_results = enrich.re,
fisher_results = fisher.re,
summary.d = summary.d)
accu.d <- anno[[2]]
accu.d <- accu.d[!accu.d$celltype %in% c("CAFs", "Cancer Epithelial"), ]
accu.h.enrich <- mean(
accu.d$hard_enrich_accu <- Vectorize(grepl)(
accu.d$cell_type_new,
accu.d$hard_enrich, ignore.case = TRUE),
na.rm = TRUE
)
accu.s.enrich <- mean(
accu.d$soft_enrich_accu <- Vectorize(grepl)(
accu.d$cell_type_new,
accu.d$soft_enrich, ignore.case = TRUE),
na.rm = TRUE
)
accu.h.fisher <- mean(
accu.d$hard_fisher_accu <- Vectorize(grepl)(
accu.d$cell_type_new,
accu.d$hard_fisher, ignore.case = TRUE),
na.rm = TRUE
)
accu.s.fisher <- mean(
accu.d$soft_fisher_accu <- Vectorize(grepl)(
accu.d$cell_type_new,
accu.d$soft_fisher, ignore.case = TRUE),
na.rm = TRUE
)
# Find differentially expressed features
markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
?annot
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
input.d <- data.frame(gene=markers$entrezid, cluster=markers$cluster,
score=markers$avg_log2FC) %>%
group_by(cluster) %>%
mutate(rank = rank(avg_log2FC),  ties.method = "random") %>%
arrange(desc(rank))
library("org.Hs.eg.db")
library(AnnotationDbi)
markers$entrezid <- mapIds(org.Hs.eg.db,
keys=markers$gene, #Column containing Ensembl gene ids
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
markers <- na.omit(markers)
input.d <- data.frame(gene=markers$entrezid, cluster=markers$cluster,
score=markers$avg_log2FC) %>%
group_by(cluster) %>%
mutate(rank = rank(avg_log2FC),  ties.method = "random") %>%
arrange(desc(rank))
# Find differentially expressed features
markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
input.d <- data.frame(gene=markers$entrezid, cluster=markers$cluster,
score=markers$avg_log2FC) %>%
group_by(cluster) %>%
mutate(rank = rank(avg_log2FC),  ties.method = "random") %>%
arrange(desc(rank))
markers$entrezid <- mapIds(org.Hs.eg.db,
keys=markers$gene, #Column containing Ensembl gene ids
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
markers <- na.omit(markers)
input.d <- data.frame(gene=markers$entrezid, cluster=markers$cluster,
score=markers$avg_log2FC) %>%
group_by(cluster) %>%
mutate(rank = rank(avg_log2FC),  ties.method = "random") %>%
arrange(desc(rank))
View(markers)
input.d <- data.frame(gene=markers$entrezid, cluster=markers$cluster,
score=markers$avg_log2FC) %>%
group_by(cluster) %>%
mutate(rank = rank(score),  ties.method = "random") %>%
arrange(desc(rank))
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
View(input.d)
View(input.d)
input.d <- data.frame(gene=markers$entrezid, cluster=markers$cluster,
score=markers$avg_log2FC) %>%
group_by(cluster) %>%
mutate(rank = rank(score),  ties.method = "random") %>%
arrange(desc(rank)) %>% select(gene, cluster, score)
View(input.d)
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
gene <- readRDS("C:/Users/rli8/projects/ziyi/enrichment-analysis/gene.rds")
View(gene)
annot.GSEA <- annot(gene, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
View(gene)
View(gene)
View(input.d)
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
# data frame to list
cols <- names(input.d)
classes <- unique(input.d[, paste(cols[2])])
View(classes)
data <- input.d
data.l <- split(data, f=data[, paste(cols[2])])
View(data.l)
input.l <- lapply(data.l, function(x) x[, paste(cols[3])])
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
load("C:/Users/rli8/projects/ziyi/enrichment-analysis/easycelltype/R/sysdata.rda")
db.data <- cellmarker_db\
db.data <- cellmarker_db
cells <- db.data.human %>%
dplyr::filter(organ %in% tissue) %>%
dplyr::select(celltype, entrezid)
# extract the species
db.data.human <- db.data %>% dplyr::filter(spe == species)
species="Human"
issue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood")
# extract the species
db.data.human <- db.data %>% dplyr::filter(spe == species)
cells <- db.data.human %>%
dplyr::filter(organ %in% tissue) %>%
dplyr::select(celltype, entrezid)
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood")
cells <- db.data.human %>%
dplyr::filter(organ %in% tissue) %>%
dplyr::select(celltype, entrezid)
input.l <- lapply(data.l, function(x) x[, paste(cols[3])])
for (i in seq(length(classes))) {
names(input.l[[i]]) <- data.l[[i]][, paste(cols[1])]
}
View(input.l)
View(data.l)
View(input.l)
input.l <- lapply(data.l, function(x) x[, paste(cols[3])])
View(input.l)
View(data.l)
table(data$cluster)
seq(length(classes)
)
length(classes)
classes <- unique(data[, paste(cols[2])])
length(classes)
data <- gene
# data frame to list
cols <- names(data)
classes <- unique(data[, paste(cols[2])])
View(gene)
View(gene)
classes <- as.numeric(unique(data[, paste(cols[2])]))
classes <- unique(data[, paste(cols[2])])
classes
as.numeric(classes)
unique(gene[, paste(cols[2])])
as.factor(unique(gene[, paste(cols[2])]))
as.factor(unique(input.d[, paste(cols[2])]))
unique(input.d[, paste(cols[2])])
View(input.d)
class(input.d)
as.character(unique(input.d[, paste(cols[2])]))
as.numeric(unique(input.d[, paste(cols[2])]))
as.factor(unique(gene[, paste(cols[2])]))
as.charater(unique(gene[, paste(cols[2])]))
as.character(unique(gene[, paste(cols[2])]))
as.charater(unique(input.d[, paste(cols[2])]))
as.character(unique(input.d[, paste(cols[2])]))
unique(input.d[, paste(cols[2])])
class(unique(input.d[, paste(cols[2])]))
class(unique(gene[, paste(cols[2])]))
as.factor(unique(input.d[, paste(cols[2])]))
as.numeric(unique(input.d[, paste(cols[2])]))
as.string(unique(input.d[, paste(cols[2])]))
unlist(unique(input.d[, paste(cols[2])]))
length(input.d)
t <- unlist(unique(input.d[, paste(cols[2])]))
length(T)
length(t)
t <- as.numeric(unlist(unique(input.d[, paste(cols[2])])))
t
t <- as.character(unlist(unique(input.d[, paste(cols[2])])))
t
t <- as.character(unlist(unique(gene[, paste(cols[2])])))
t
length(data.l)
length(t)
t <- as.character(unlist(unique(input.d[, paste(cols[2])])))
length(t)
setwd("C:/Users/rli8/projects/ziyi/enrichment-analysis/easycelltype")
library(devtoold)
library(devtools)
load_all()
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
library(EasyCellType)
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
library(EasyCellType)
install.packages("devtools")
devtools::install_github("rx-li/EasyCellType")
library(EasyCellType)
# Install Seurat
install.packages('Seurat')
library(Seurat)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/rli8/projects/ziyi/enrichment-analysis/easycelltype/data/hg19/")
# Initialize the Seurat object
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
# QC and select samples
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# Normalize the data
pbmc <- NormalizeData(pbmc)
# Identify highly variable features
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Scale the data
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
# Perfom linear dimensional reduction
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Cluster the cells
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Find differentially expressed features
markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
library("org.Hs.eg.db")
library(AnnotationDbi)
markers$entrezid <- mapIds(org.Hs.eg.db,
keys=markers$gene, #Column containing Ensembl gene ids
column="ENTREZID",
keytype="SYMBOL",
multiVals="first")
markers <- na.omit(markers)
library(dplyr)
markers_sort <- data.frame(gene=markers$entrezid, cluster=markers$cluster,
score=markers$avg_log2FC) %>%
group_by(cluster) %>%
mutate(rank = rank(score),  ties.method = "random") %>%
arrange(desc(rank))
input.d <- as.data.frame(markers_sort[, 1:3])
annot.GSEA <- annot(input.d, db="cellmarker", species="Human",
tissue=c("Blood", "Peripheral blood", "Blood vessel",
"Umbilical cord blood", "Venous blood"), p_cut=0.3,
test="GSEA")
?GSEA
plot_dot(test="GSEA", annot.GSEA)
plot_bar(annot.GSEA)
plot_bar(test=GSEA, annot.GSEA)
plot_bar(test="GSEA", annot.GSEA)
